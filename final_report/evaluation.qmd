---
title: "Tuning & Evaluation"
---

```{r include=F}
knitr::opts_chunk$set(warning=F,message=F)

library(data.table)
library(tidyverse)
library(tidymodels)
library(rsample)
library(xgboost)
library(caret)
```

## Evaluation - randomForest 모델

Cross Validation 기반하에 채택된 randomForest 모델을 평가해 본다.

## Data Loading

```{r}
train <- read.csv("train.csv")
test <- read.csv("test.csv")

train <- train %>% 
  select(-X,-X.1,-weekday) %>% 
  mutate_if(is.character,as.factor)

test <- test %>% 
  select(-X,-X.1,-weekday) %>% 
  mutate_if(is.character,as.factor)
```

```{r}
rec <- train %>% 
  recipe(occupancy ~.) %>% 
  step_normalize(all_numeric_predictors()) %>% 
  step_dummy(all_factor_predictors())
```

## Modeling

### Random Forest

```{r}
set.seed(123)
control <- trainControl(method='cv',
                        number=5,
                        classProbs=T,
                        summaryFunction = twoClassSummary,
                        savePredictions="all")

tunegrid <- expand.grid(mtry = c(2, 3, 4, 5))

rf_gridsearch <- train(rec,train,
                       method='rf',
                       trControl = control,
                       tuneGrid = tunegrid,
                       metric ="ROC")
```

### Confusion Matrix

```{r}
pred <- predict(rf_gridsearch,newdata=test)
confusionMatrix(pred,test$occupancy)
```

### ROC

```{r}
library(pROC)
pred_prob <- predict(rf_gridsearch,newdata=test,type="prob")[,1]
roc_result <- roc(response=test$occupancy,
                  predictor=pred_prob,
                  levels =rev(levels(test$occupancy)))

```

```{r}
par(pty="s")
plot(roc_result,
     print.thres ="best",
     print.auc = TRUE,
     legacy.axes = T)
```

```{r}
rf_gridsearch

```

## 최종 모델링 (with all train datasets)

Hyperparameters: mtry = 2

```{r}
control_final <- trainControl(method='none',classProbs = TRUE)

tunegrid_final <- data.frame(mtry=2)

rf_final <- train(rec,train,
                       method='rf',
                       trControl = control_final,
                       tuneGrid= tunegrid_final,
                       metric ="ROC")

pred <- predict(rf_final,newdata=test)
confusionMatrix(pred,test$occupancy)

pred_prob <- predict(rf_final,newdata=test,type="prob")[,1]
roc_result <- roc(response=test$occupancy,
                  predictor=pred_prob,
                  levels =rev(levels(test$occupancy)))

par(pty="s")
plot(roc_result,
     print.thres ="best",
     print.auc = TRUE,
     legacy.axes = T)
```

## (참고) Features Importance

```{r}
plot(varImp(rf_final,scale=F))
```
